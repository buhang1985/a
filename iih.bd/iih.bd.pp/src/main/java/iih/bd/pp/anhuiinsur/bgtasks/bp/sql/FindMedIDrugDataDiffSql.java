package iih.bd.pp.anhuiinsur.bgtasks.bp.sql;

import org.apache.commons.lang.StringUtils;

import iih.bd.pp.medinsurrecdiff.d.AHMedIRecDiffType;
import iih.bd.pp.medinsurrecdiff.d.MedInsurRecDiffDO;
import xap.sys.appfw.orm.utils.ITransQry;
import xap.sys.jdbc.kernel.SqlParam;

/**
 * 查询医保药品数据差异SQL
 * 
 * @author hao_wu
 *
 */
public class FindMedIDrugDataDiffSql implements ITransQry {

	private MedInsurRecDiffDO _recDiff;
	private Integer _diffType;

	public FindMedIDrugDataDiffSql(MedInsurRecDiffDO recDiff, Integer diffType) {
		this._recDiff = recDiff;
		this._diffType = diffType;
	}

	@Override
	public SqlParam getQryParameter(StringBuffer arg0) {
		SqlParam sqlParam = new SqlParam();
		sqlParam.addParam(this._diffType);
		if (this._diffType.equals(AHMedIRecDiffType.AFTERMODIFY)) {
			sqlParam.addParam(this._recDiff.getId_curdown());
			sqlParam.addParam(this._recDiff.getId_predown());
		}
		if (this._diffType.equals(AHMedIRecDiffType.BEFOREMODIFY)) {
			sqlParam.addParam(this._recDiff.getId_predown());
			sqlParam.addParam(this._recDiff.getId_curdown());
		}
		return sqlParam;
	}

	@Override
	public String getQrySQLStr() {
		StringBuilder sqlBuilder = new StringBuilder();

		String baseSql = GetBaseSql();
		sqlBuilder.append(baseSql);

		String wherePart = GetWherePart();
		if (StringUtils.isNotEmpty(wherePart)) {
			sqlBuilder.append(" where ");
			sqlBuilder.append(wherePart);
		}
		return sqlBuilder.toString();
	}

	private String GetBaseSql() {
		StringBuilder sqlBuilder = new StringBuilder();
		sqlBuilder.append(" SELECT ? AS EU_DIFFTYPE,						 ");
		sqlBuilder.append("   A0.ID_GRP,							 ");
		sqlBuilder.append("   A0.ID_ORG,							 ");
		sqlBuilder.append("   A0.ID_DOWN,							 ");
		sqlBuilder.append("   A0.NAME_ENGLISH,							 ");
		sqlBuilder.append("   A0.DRUG_TYPE,							 ");
		sqlBuilder.append("   A0.STR_OCT,							 ");
		sqlBuilder.append("   A0.DRUG_GRADE,							 ");
		sqlBuilder.append("   A0.DOSE_UNIT,							 ");
		sqlBuilder.append("   A0.DOSAGE,							 ");
		sqlBuilder.append("   A0.SINGLE_DOSE,							 ");
		sqlBuilder.append("   A0.FREQ,								 ");
		sqlBuilder.append("   A0.USAGE,								 ");
		sqlBuilder.append("   A0.SPEC,								 ");
		sqlBuilder.append("   A0.UNIT,								 ");
		sqlBuilder.append("   A0.AMT_PREPAY_MAX,						 ");
		sqlBuilder.append("   A0.STR_PREP_SELF,							 ");
		sqlBuilder.append("   A0.HOSPITAL_CODE,							 ");
		sqlBuilder.append("   A0.STR_APPROVE,							 ");
		sqlBuilder.append("   A0.MIN_HOSPITAL_RANK,						 ");
		sqlBuilder.append("   A0.MIN_DOCTOR_RANK,						 ");
		sqlBuilder.append("   A0.STR_ADD_INSUR,							 ");
		sqlBuilder.append("   A0.STR_ADD_INSUR_SAL,						 ");
		sqlBuilder.append("   A0.STR_BIDDING_DRUG,						 ");
		sqlBuilder.append("   A0.BIDDING_PRICE,							 ");
		sqlBuilder.append("   A0.STR_SPEC_DRUG,							 ");
		sqlBuilder.append("   A0.STR_TWO_INSURPAY,						 ");
		sqlBuilder.append("   A0.DRUG_NAME,							 ");
		sqlBuilder.append("   A0.DRUG_NAME_PRICE,						 ");
		sqlBuilder.append("   A0.DRUG_NAME_PYCODE,						 ");
		sqlBuilder.append("   A0.DRUG_NAME_WBCODE,						 ");
		sqlBuilder.append("   A0.PHARM_FIRM_NAME,						 ");
		sqlBuilder.append("   A0.PRC_DRUG_CERTI,						 ");
		sqlBuilder.append("   A0.ID_EMP_HANDLE,							 ");
		sqlBuilder.append("   A0.DT_HANDLE,							 ");
		sqlBuilder.append("   A0.PRC_DIREC_CODE,						 ");
		sqlBuilder.append("   A0.REFERENCE_PRICE,						 ");
		sqlBuilder.append("   A0.REFERENCE_HOSPITAL,						 ");
		sqlBuilder.append("   A0.ORIGIN_PLACE,							 ");
		sqlBuilder.append("   A0.STR_EFFECTIVE,							 ");
		sqlBuilder.append("   A0.STR_PRC_B_DRUGLIST,						 ");
		sqlBuilder.append("   A0.STR_RESIDENT_USE,						 ");
		sqlBuilder.append("   A0.SEX_LIMIT_PAY,							 ");
		sqlBuilder.append("   A0.DISEASE_LIMIT_PAY,						 ");
		sqlBuilder.append("   A0.PY_CODE,							 ");
		sqlBuilder.append("   A0.WB_CODE,							 ");
		sqlBuilder.append("   A0.ZDY_CODE,							 ");
		sqlBuilder.append("   A0.STR_PRC_DRUGLIST,						 ");
		sqlBuilder.append("   A0.MAX_USE_DAYS,							 ");
		sqlBuilder.append("   A0.CODE,								 ");
		sqlBuilder.append("   A0.NAME,								 ");
		sqlBuilder.append("   A0.CODE_CA,							 ");
		sqlBuilder.append("   A0.NAME_CA,							 ");
		sqlBuilder.append("   A0.SD_HPSRVTP,							 ");
		sqlBuilder.append("   A0.PRI_MAX,							 ");
		sqlBuilder.append("   A0.RETIRE_EY_PRI_MAX,						 ");
		sqlBuilder.append("   A0.DES,								 ");
		sqlBuilder.append("   A0.DT_B,								 ");
		sqlBuilder.append("   A0.DT_E,								 ");
		sqlBuilder.append("   A0.RATE_SELF_OEP,							 ");
		sqlBuilder.append("   A0.RATE_SELF_IP,							 ");
		sqlBuilder.append("   A0.RATE_RETIRE,							 ");
		sqlBuilder.append("   A0.RATE_INJURY,							 ");
		sqlBuilder.append("   A0.RATE_BIRTH,							 ");
		sqlBuilder.append("   A0.RATE_EY,							 ");
		sqlBuilder.append("   A0.RATE_UNIT,							 ");
		sqlBuilder.append("   A0.RATE_FAMILY,							 ");
		sqlBuilder.append("   A0.RATE_IMPORT_DIFF,						 ");
		sqlBuilder.append("   A0.NOTE								 ");
		sqlBuilder.append(" FROM BD_ANMEDI_DRUG_REC A0						 ");
		sqlBuilder.append(" INNER JOIN BD_ANMEDI_DRUG_REC A1					 ");
		sqlBuilder.append(" ON A0.ID_DOWN          = ?						 ");
		sqlBuilder.append(" AND A1.ID_DOWN         = ?						 ");
		sqlBuilder.append(" AND ((A0.CODE            IS NULL		       ");
		sqlBuilder.append(" AND A1.CODE              IS NULL)		       ");
		sqlBuilder.append(" OR (A0.CODE               = A1.CODE ))	       ");
		sqlBuilder.append(" AND ((A0.NAME            IS NULL		       ");
		sqlBuilder.append(" AND A1.NAME              IS NULL)		       ");
		sqlBuilder.append(" OR (A0.NAME               = A1.NAME ))	       ");
		sqlBuilder.append(" AND ((A0.DOSAGE          IS NULL		       ");
		sqlBuilder.append(" AND A1.DOSAGE            IS NULL)		       ");
		sqlBuilder.append(" OR (A0.DOSAGE             = A1.DOSAGE ))	       ");
		sqlBuilder.append(" AND ((A0.PHARM_FIRM_NAME IS NULL		       ");
		sqlBuilder.append(" AND A1.PHARM_FIRM_NAME   IS NULL)		       ");
		sqlBuilder.append(" OR (A0.PHARM_FIRM_NAME    = A1.PHARM_FIRM_NAME ))  ");
		sqlBuilder.append(" AND ((A0.PRC_DRUG_CERTI  IS NULL		       ");
		sqlBuilder.append(" AND A1.PRC_DRUG_CERTI    IS NULL)		       ");
		sqlBuilder.append(" OR (A0.PRC_DRUG_CERTI     = A1.PRC_DRUG_CERTI ))   ");
		sqlBuilder.append(" AND ((A0.PRC_DIREC_CODE  IS NULL		       ");
		sqlBuilder.append(" AND A1.PRC_DIREC_CODE    IS NULL)		       ");
		sqlBuilder.append(" OR (A0.PRC_DIREC_CODE     = A1.PRC_DIREC_CODE ))   ");
		sqlBuilder.append(" AND (								 ");
		sqlBuilder.append(" (A0.DRUG_NAME           IS NULL					 ");
		sqlBuilder.append(" AND A1.DRUG_NAME           IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DRUG_NAME          IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DRUG_NAME           IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DRUG_NAME           <> A1.DRUG_NAME )			 ");
		sqlBuilder.append(" OR (A0.DRUG_TYPE           IS NULL					 ");
		sqlBuilder.append(" AND A1.DRUG_TYPE           IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DRUG_TYPE          IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DRUG_TYPE           IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DRUG_TYPE           <> A1.DRUG_TYPE )			 ");
		sqlBuilder.append(" OR (A0.STR_OCT             IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_OCT             IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_OCT            IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_OCT             IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_OCT             <> A1.STR_OCT )				 ");
		sqlBuilder.append(" OR (A0.DRUG_GRADE          IS NULL					 ");
		sqlBuilder.append(" AND A1.DRUG_GRADE          IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DRUG_GRADE         IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DRUG_GRADE          IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DRUG_GRADE          <> A1.DRUG_GRADE )			 ");
		sqlBuilder.append(" OR (A0.DOSE_UNIT           IS NULL					 ");
		sqlBuilder.append(" AND A1.DOSE_UNIT           IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DOSE_UNIT          IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DOSE_UNIT           IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DOSE_UNIT           <> A1.DOSE_UNIT )			 ");
		sqlBuilder.append(" OR (A0.SINGLE_DOSE         IS NULL					 ");
		sqlBuilder.append(" AND A1.SINGLE_DOSE         IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.SINGLE_DOSE        IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.SINGLE_DOSE         IS NULL )				 ");
		sqlBuilder.append(" OR (A0.SINGLE_DOSE         <> A1.SINGLE_DOSE )			 ");
		sqlBuilder.append(" OR (A0.FREQ                IS NULL					 ");
		sqlBuilder.append(" AND A1.FREQ                IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.FREQ               IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.FREQ                IS NULL )				 ");
		sqlBuilder.append(" OR (A0.FREQ                <> A1.FREQ )				 ");
		sqlBuilder.append(" OR (A0.NAME_ENGLISH        IS NULL					 ");
		sqlBuilder.append(" AND A1.NAME_ENGLISH        IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.NAME_ENGLISH       IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.NAME_ENGLISH        IS NULL )				 ");
		sqlBuilder.append(" OR (A0.NAME_ENGLISH        <> A1.NAME_ENGLISH )			 ");
		sqlBuilder.append(" OR (A0.USAGE               IS NULL					 ");
		sqlBuilder.append(" AND A1.USAGE               IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.USAGE              IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.USAGE               IS NULL )				 ");
		sqlBuilder.append(" OR (A0.USAGE               <> A1.USAGE )				 ");
		sqlBuilder.append(" OR (A0.SPEC                IS NULL					 ");
		sqlBuilder.append(" AND A1.SPEC                IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.SPEC               IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.SPEC                IS NULL )				 ");
		sqlBuilder.append(" OR (A0.SPEC                <> A1.SPEC )				 ");
		sqlBuilder.append(" OR (A0.UNIT                IS NULL					 ");
		sqlBuilder.append(" AND A1.UNIT                IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.UNIT               IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.UNIT                IS NULL )				 ");
		sqlBuilder.append(" OR (A0.UNIT                <> A1.UNIT )				 ");
		sqlBuilder.append(" OR (A0.AMT_PREPAY_MAX      IS NULL					 ");
		sqlBuilder.append(" AND A1.AMT_PREPAY_MAX      IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.AMT_PREPAY_MAX     IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.AMT_PREPAY_MAX      IS NULL )				 ");
		sqlBuilder.append(" OR (A0.AMT_PREPAY_MAX      <> A1.AMT_PREPAY_MAX )			 ");
		sqlBuilder.append(" OR (A0.STR_PREP_SELF       IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_PREP_SELF       IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_PREP_SELF      IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_PREP_SELF       IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_PREP_SELF       <> A1.STR_PREP_SELF )			 ");
		sqlBuilder.append(" OR (A0.HOSPITAL_CODE       IS NULL					 ");
		sqlBuilder.append(" AND A1.HOSPITAL_CODE       IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.HOSPITAL_CODE      IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.HOSPITAL_CODE       IS NULL )				 ");
		sqlBuilder.append(" OR (A0.HOSPITAL_CODE       <> A1.HOSPITAL_CODE )			 ");
		sqlBuilder.append(" OR (A0.STR_APPROVE         IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_APPROVE         IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_APPROVE        IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_APPROVE         IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_APPROVE         <> A1.STR_APPROVE )			 ");
		sqlBuilder.append(" OR (A0.MIN_HOSPITAL_RANK   IS NULL					 ");
		sqlBuilder.append(" AND A1.MIN_HOSPITAL_RANK   IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.MIN_HOSPITAL_RANK  IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.MIN_HOSPITAL_RANK   IS NULL )				 ");
		sqlBuilder.append(" OR (A0.MIN_HOSPITAL_RANK   <> A1.MIN_HOSPITAL_RANK )		 ");
		sqlBuilder.append(" OR (A0.MIN_DOCTOR_RANK     IS NULL					 ");
		sqlBuilder.append(" AND A1.MIN_DOCTOR_RANK     IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.MIN_DOCTOR_RANK    IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.MIN_DOCTOR_RANK     IS NULL )				 ");
		sqlBuilder.append(" OR (A0.MIN_DOCTOR_RANK     <> A1.MIN_DOCTOR_RANK )			 ");
		sqlBuilder.append(" OR (A0.STR_ADD_INSUR       IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_ADD_INSUR       IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_ADD_INSUR      IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_ADD_INSUR       IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_ADD_INSUR       <> A1.STR_ADD_INSUR )			 ");
		sqlBuilder.append(" OR (A0.STR_ADD_INSUR_SAL   IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_ADD_INSUR_SAL   IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_ADD_INSUR_SAL  IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_ADD_INSUR_SAL   IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_ADD_INSUR_SAL   <> A1.STR_ADD_INSUR_SAL )		 ");
		sqlBuilder.append(" OR (A0.STR_BIDDING_DRUG    IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_BIDDING_DRUG    IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_BIDDING_DRUG   IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_BIDDING_DRUG    IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_BIDDING_DRUG    <> A1.STR_BIDDING_DRUG )			 ");
		sqlBuilder.append(" OR (A0.BIDDING_PRICE       IS NULL					 ");
		sqlBuilder.append(" AND A1.BIDDING_PRICE       IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.BIDDING_PRICE      IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.BIDDING_PRICE       IS NULL )				 ");
		sqlBuilder.append(" OR (A0.BIDDING_PRICE       <> A1.BIDDING_PRICE )			 ");
		sqlBuilder.append(" OR (A0.STR_SPEC_DRUG       IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_SPEC_DRUG       IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_SPEC_DRUG      IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_SPEC_DRUG       IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_SPEC_DRUG       <> A1.STR_SPEC_DRUG )			 ");
		sqlBuilder.append(" OR (A0.STR_TWO_INSURPAY    IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_TWO_INSURPAY    IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_TWO_INSURPAY   IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_TWO_INSURPAY    IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_TWO_INSURPAY    <> A1.STR_TWO_INSURPAY )			 ");
		sqlBuilder.append(" OR (A0.DRUG_NAME           IS NULL					 ");
		sqlBuilder.append(" AND A1.DRUG_NAME           IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DRUG_NAME          IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DRUG_NAME           IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DRUG_NAME           <> A1.DRUG_NAME )			 ");
		sqlBuilder.append(" OR (A0.DRUG_NAME_PRICE     IS NULL					 ");
		sqlBuilder.append(" AND A1.DRUG_NAME_PRICE     IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DRUG_NAME_PRICE    IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DRUG_NAME_PRICE     IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DRUG_NAME_PRICE     <> A1.DRUG_NAME_PRICE )			 ");
		sqlBuilder.append(" OR (A0.DRUG_NAME_PYCODE    IS NULL					 ");
		sqlBuilder.append(" AND A1.DRUG_NAME_PYCODE    IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DRUG_NAME_PYCODE   IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DRUG_NAME_PYCODE    IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DRUG_NAME_PYCODE    <> A1.DRUG_NAME_PYCODE )			 ");
		sqlBuilder.append(" OR (A0.DRUG_NAME_WBCODE    IS NULL					 ");
		sqlBuilder.append(" AND A1.DRUG_NAME_WBCODE    IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DRUG_NAME_WBCODE   IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DRUG_NAME_WBCODE    IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DRUG_NAME_WBCODE    <> A1.DRUG_NAME_WBCODE )			 ");
		sqlBuilder.append(" OR (A0.ID_EMP_HANDLE       IS NULL					 ");
		sqlBuilder.append(" AND A1.ID_EMP_HANDLE       IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.ID_EMP_HANDLE      IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.ID_EMP_HANDLE       IS NULL )				 ");
		sqlBuilder.append(" OR (A0.ID_EMP_HANDLE       <> A1.ID_EMP_HANDLE )			 ");
		sqlBuilder.append(" OR (A0.DT_HANDLE           IS NULL					 ");
		sqlBuilder.append(" AND A1.DT_HANDLE           IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DT_HANDLE          IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DT_HANDLE           IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DT_HANDLE           <> A1.DT_HANDLE )			 ");
		sqlBuilder.append(" OR (A0.REFERENCE_PRICE     IS NULL					 ");
		sqlBuilder.append(" AND A1.REFERENCE_PRICE     IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.REFERENCE_PRICE    IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.REFERENCE_PRICE     IS NULL )				 ");
		sqlBuilder.append(" OR (A0.REFERENCE_PRICE     <> A1.REFERENCE_PRICE )			 ");
		sqlBuilder.append(" OR (A0.REFERENCE_HOSPITAL  IS NULL					 ");
		sqlBuilder.append(" AND A1.REFERENCE_HOSPITAL  IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.REFERENCE_HOSPITAL IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.REFERENCE_HOSPITAL  IS NULL )				 ");
		sqlBuilder.append(" OR (A0.REFERENCE_HOSPITAL  <> A1.REFERENCE_HOSPITAL )		 ");
		sqlBuilder.append(" OR (A0.ORIGIN_PLACE        IS NULL					 ");
		sqlBuilder.append(" AND A1.ORIGIN_PLACE        IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.ORIGIN_PLACE       IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.ORIGIN_PLACE        IS NULL )				 ");
		sqlBuilder.append(" OR (A0.ORIGIN_PLACE        <> A1.ORIGIN_PLACE )			 ");
		sqlBuilder.append(" OR (A0.STR_EFFECTIVE       IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_EFFECTIVE       IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_EFFECTIVE      IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_EFFECTIVE       IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_EFFECTIVE       <> A1.STR_EFFECTIVE )			 ");
		sqlBuilder.append(" OR (A0.STR_PRC_B_DRUGLIST  IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_PRC_B_DRUGLIST  IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_PRC_B_DRUGLIST IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_PRC_B_DRUGLIST  IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_PRC_B_DRUGLIST  <> A1.STR_PRC_B_DRUGLIST )		 ");
		sqlBuilder.append(" OR (A0.STR_RESIDENT_USE    IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_RESIDENT_USE    IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_RESIDENT_USE   IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_RESIDENT_USE    IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_RESIDENT_USE    <> A1.STR_RESIDENT_USE )			 ");
		sqlBuilder.append(" OR (A0.SEX_LIMIT_PAY       IS NULL					 ");
		sqlBuilder.append(" AND A1.SEX_LIMIT_PAY       IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.SEX_LIMIT_PAY      IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.SEX_LIMIT_PAY       IS NULL )				 ");
		sqlBuilder.append(" OR (A0.SEX_LIMIT_PAY       <> A1.SEX_LIMIT_PAY )			 ");
		sqlBuilder.append(" OR (A0.DISEASE_LIMIT_PAY   IS NULL					 ");
		sqlBuilder.append(" AND A1.DISEASE_LIMIT_PAY   IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.DISEASE_LIMIT_PAY  IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DISEASE_LIMIT_PAY   IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DISEASE_LIMIT_PAY   <> A1.DISEASE_LIMIT_PAY )		 ");
		sqlBuilder.append(" OR (A0.PY_CODE             IS NULL					 ");
		sqlBuilder.append(" AND A1.PY_CODE             IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.PY_CODE            IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.PY_CODE             IS NULL )				 ");
		sqlBuilder.append(" OR (A0.PY_CODE             <> A1.PY_CODE )				 ");
		sqlBuilder.append(" OR (A0.WB_CODE             IS NULL					 ");
		sqlBuilder.append(" AND A1.WB_CODE             IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.WB_CODE            IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.WB_CODE             IS NULL )				 ");
		sqlBuilder.append(" OR (A0.WB_CODE             <> A1.WB_CODE )				 ");
		sqlBuilder.append(" OR (A0.ZDY_CODE            IS NULL					 ");
		sqlBuilder.append(" AND A1.ZDY_CODE            IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.ZDY_CODE           IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.ZDY_CODE            IS NULL )				 ");
		sqlBuilder.append(" OR (A0.ZDY_CODE            <> A1.ZDY_CODE )				 ");
		sqlBuilder.append(" OR (A0.STR_PRC_DRUGLIST    IS NULL					 ");
		sqlBuilder.append(" AND A1.STR_PRC_DRUGLIST    IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.STR_PRC_DRUGLIST   IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.STR_PRC_DRUGLIST    IS NULL )				 ");
		sqlBuilder.append(" OR (A0.STR_PRC_DRUGLIST    <> A1.STR_PRC_DRUGLIST )			 ");
		sqlBuilder.append(" OR (A0.MAX_USE_DAYS        IS NULL					 ");
		sqlBuilder.append(" AND A1.MAX_USE_DAYS        IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.MAX_USE_DAYS       IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.MAX_USE_DAYS        IS NULL )				 ");
		sqlBuilder.append(" OR (A0.MAX_USE_DAYS        <> A1.MAX_USE_DAYS )			 ");
		sqlBuilder.append(" OR (A0.CODE_CA             IS NULL					 ");
		sqlBuilder.append(" AND A1.CODE_CA             IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.CODE_CA            IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.CODE_CA             IS NULL )				 ");
		sqlBuilder.append(" OR (A0.CODE_CA             <> A1.CODE_CA )				 ");
		sqlBuilder.append(" OR (A0.NAME_CA             IS NULL					 ");
		sqlBuilder.append(" AND A1.NAME_CA             IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.NAME_CA            IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.NAME_CA             IS NULL )				 ");
		sqlBuilder.append(" OR (A0.NAME_CA             <> A1.NAME_CA )				 ");
		sqlBuilder.append(" OR (A0.SD_HPSRVTP          IS NULL					 ");
		sqlBuilder.append(" AND A1.SD_HPSRVTP          IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.SD_HPSRVTP         IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.SD_HPSRVTP          IS NULL )				 ");
		sqlBuilder.append(" OR (A0.SD_HPSRVTP          <> A1.SD_HPSRVTP )			 ");
		sqlBuilder.append(" OR (A0.PRI_MAX             IS NULL					 ");
		sqlBuilder.append(" AND A1.PRI_MAX             IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.PRI_MAX            IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.PRI_MAX             IS NULL )				 ");
		sqlBuilder.append(" OR (A0.PRI_MAX             <> A1.PRI_MAX )				 ");
		sqlBuilder.append(" OR (A0.RETIRE_EY_PRI_MAX   IS NULL					 ");
		sqlBuilder.append(" AND A1.RETIRE_EY_PRI_MAX   IS NOT NULL)				 ");
		sqlBuilder.append(" AND (A0.RETIRE_EY_PRI_MAX  IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RETIRE_EY_PRI_MAX   IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RETIRE_EY_PRI_MAX   <> A1.RETIRE_EY_PRI_MAX )		 ");
		sqlBuilder.append(" OR (A0.DES                 IS NULL					 ");
		sqlBuilder.append(" AND A1.DES                 IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.DES                IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DES                 IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DES                 <> A1.DES )				 ");
		sqlBuilder.append(" OR (A0.DT_B                IS NULL					 ");
		sqlBuilder.append(" AND A1.DT_B                IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.DT_B               IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DT_B                IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DT_B                <> A1.DT_B )				 ");
		sqlBuilder.append(" OR (A0.DT_E                IS NULL					 ");
		sqlBuilder.append(" AND A1.DT_E                IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.DT_E               IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.DT_E                IS NULL )				 ");
		sqlBuilder.append(" OR (A0.DT_E                <> A1.DT_E )				 ");
		sqlBuilder.append(" OR (A0.RATE_SELF_OEP       IS NULL					 ");
		sqlBuilder.append(" AND A1.RATE_SELF_OEP       IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.RATE_SELF_OEP      IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RATE_SELF_OEP       IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RATE_SELF_OEP       <> A1.RATE_SELF_OEP )			 ");
		sqlBuilder.append(" OR (A0.RATE_SELF_IP        IS NULL					 ");
		sqlBuilder.append(" AND A1.RATE_SELF_IP        IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.RATE_SELF_IP       IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RATE_SELF_IP        IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RATE_SELF_IP        <> A1.RATE_SELF_IP )			 ");
		sqlBuilder.append(" OR (A0.RATE_RETIRE         IS NULL					 ");
		sqlBuilder.append(" AND A1.RATE_RETIRE         IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.RATE_RETIRE        IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RATE_RETIRE         IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RATE_RETIRE         <> A1.RATE_RETIRE )			 ");
		sqlBuilder.append(" OR (A0.RATE_INJURY         IS NULL					 ");
		sqlBuilder.append(" AND A1.RATE_INJURY         IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.RATE_INJURY        IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RATE_INJURY         IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RATE_INJURY         <> A1.RATE_INJURY )			 ");
		sqlBuilder.append(" OR (A0.RATE_BIRTH          IS NULL					 ");
		sqlBuilder.append(" AND A1.RATE_BIRTH          IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.RATE_BIRTH         IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RATE_BIRTH          IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RATE_BIRTH          <> A1.RATE_BIRTH )			 ");
		sqlBuilder.append(" OR (A0.RATE_EY             IS NULL					 ");
		sqlBuilder.append(" AND A1.RATE_EY             IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.RATE_EY            IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RATE_EY             IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RATE_EY             <> A1.RATE_EY )				 ");
		sqlBuilder.append(" OR (A0.RATE_UNIT           IS NULL					 ");
		sqlBuilder.append(" AND A1.RATE_UNIT           IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.RATE_UNIT          IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RATE_UNIT           IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RATE_UNIT           <> A1.RATE_UNIT )			 ");
		sqlBuilder.append(" OR (A0.RATE_FAMILY         IS NULL					 ");
		sqlBuilder.append(" AND A1.RATE_FAMILY         IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.RATE_FAMILY        IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RATE_FAMILY         IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RATE_FAMILY         <> A1.RATE_FAMILY )			 ");
		sqlBuilder.append(" OR (A0.RATE_IMPORT_DIFF    IS NULL					 ");
		sqlBuilder.append(" AND A1.RATE_IMPORT_DIFF    IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.RATE_IMPORT_DIFF   IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.RATE_IMPORT_DIFF    IS NULL )				 ");
		sqlBuilder.append(" OR (A0.RATE_IMPORT_DIFF    <> A1.RATE_IMPORT_DIFF )			 ");
		sqlBuilder.append(" OR (A0.NOTE                IS NULL					 ");
		sqlBuilder.append(" AND A1.NOTE               IS NOT NULL)				 ");
		sqlBuilder.append(" OR (A0.NOTE               IS NOT NULL				 ");
		sqlBuilder.append(" AND A1.NOTE               IS NULL )                  ");
		sqlBuilder.append(" OR (A0.NOTE <> A1.NOTE ))	 ");
		return sqlBuilder.toString();
	}

	private String GetWherePart() {
		StringBuilder wherePartBuilder = new StringBuilder("1 = 1");
		return wherePartBuilder.toString();
	}
}
