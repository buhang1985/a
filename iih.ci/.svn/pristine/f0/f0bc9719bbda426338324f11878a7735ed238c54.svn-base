package iih.ci.mr.s.bp.task;

import java.util.ArrayList;
import java.util.List;
import iih.bd.bc.event.pub.IMrEventConst;
import iih.bd.bc.udi.pub.ICiMrDictCodeConst;
import iih.bd.bs.workcalendar.i.IWorkcalendarExtService;
import iih.ci.mr.ciamr.d.AMrDO;
import iih.ci.mr.ciamr.i.ICiamrCudService;
import iih.ci.mr.ciamr.i.ICiamrRService;
import iih.ci.mr.diainfodto.d.DiaInfoDTO;
import iih.ci.mr.i.ICiMrParamService;
import iih.ci.mr.mrserviceext.s.bp.SendMrFpDataBp;
import iih.ci.mr.s.bp.common.CiMrParamUtils;
import iih.ci.mrfp.bl2mrfp.d.CiMrFpBlDO;
import iih.ci.mrfp.bl2mrfp.i.IBl2mrfpRService;
import iih.ci.mrfp.hospitalfirstpagedto.d.HospitalFirstPageDTO;
import iih.ci.mrfp.other2mrfp.d.CiMrFpOtherDO;
import iih.ci.mrfp.other2mrfp.i.IOther2mrfpMDORService;
import iih.ci.mrfp.pat2mrfp.d.CiMrFpPatDO;
import iih.ci.mrfp.pat2mrfp.i.IPat2mrfpRService;
import iih.ci.mrfp.sug2mrfp.d.CiMrFpSugDO;
import iih.ci.mrfp.sug2mrfp.i.ISug2mrfpRService;
import iih.ci.mrqc.cimrrecall.d.CiMrRecallDO;
import iih.ci.mrqc.cimrrecall.i.ICimrrecallRService;
import iih.en.pv.pativisit.d.PatiVisitDO;
import iih.en.pv.pativisit.i.IPativisitRService;
import xap.mw.core.data.BizException;
import xap.mw.core.data.Context;
import xap.mw.core.data.DOStatus;
import xap.mw.core.data.FArrayList;
import xap.mw.coreitf.d.FBoolean;
import xap.mw.coreitf.d.FDateTime;
import xap.mw.sf.core.util.ServiceFinder;
import xap.sys.appfw.businessevent.EventDispatcher;
import xap.sys.appfw.businessevent.IEventType;
import xap.sys.appfw.businessevent.bd.BDCommonEvent;
import xap.sys.devcfg.alert.PreAlertObject;
import xap.sys.devcfg.alert.taskcenter.BgWorkingContext;
import xap.sys.devcfg.alert.taskcenter.IBackgroundWorkPlugin;
import xap.sys.jdbc.facade.DAFacade;
import xap.sys.jdbc.handler.BeanListHandler;
import xap.sys.orgfw.org.d.OrgDO;
import xap.sys.orgfw.org.i.IOrgRServiceExt;

public class HoMrmAutoCompleteTask implements IBackgroundWorkPlugin {
	
	@Override
	public PreAlertObject executeTask(BgWorkingContext arg0) throws BizException {
		IOrgRServiceExt orgRService = ServiceFinder.find(IOrgRServiceExt.class);
		OrgDO[] orgs = orgRService.queryAllOrgUnitVOs();// 获取集团下所有组织id
		
		for (OrgDO org : orgs) {
			String id_org = org.getId_org();
			Context.get().setOrgId(id_org);
			if (CiMrParamUtils.GetSysParamMrmHoAutoComplete(id_org)) {
				// UpdWithSql(id_org);
				UpdWithService(id_org);
			}
		}
		return null;
	}

	/**
	 * 使用sql更新完成自动完成
	 * 
	 * @param id_org
	 * @throws BizException
	 */
	private void UpdWithSql(String id_org) throws BizException {
		IWorkcalendarExtService calService = ServiceFinder.find(IWorkcalendarExtService.class);// 工作日历
		ICiMrParamService paraService = ServiceFinder.find(ICiMrParamService.class);// 参数
		int days = CiMrParamUtils.GetSysParamMrmHoCompleteInterval(id_org);
		String id_cld = paraService.getSysParamHoliday(id_org); // 工作日历
		DAFacade daf = new DAFacade();
		FDateTime fd = new FDateTime();

		FDateTime fd_complete = calService.getEndDateTime(fd, -days * 24, id_cld);
		// FDateTime fd_complete = fd.addSeconds(-days*24*3600);
		StringBuilder sql = new StringBuilder();
		sql.append("update ci_amr  set ci_amr.fg_complete = 'Y'");
		sql.append(" where exists(select * from en_ent where ci_amr.id_ent = en_ent.id_ent and en_ent.dt_end< '");
		sql.append(fd_complete.toLocalString());
		sql.append("' and ci_amr.fg_complete <> 'Y' and ci_amr.ds = '0')");
		String sqlStr = sql.toString();
		daf.execUpdate(sqlStr);

	}

	/**
	 * 使用框架完成自动完成
	 */
	private void UpdWithService(String id_org) throws BizException {
		// 获得服务
		IPativisitRService PativisitRService = ServiceFinder.find(IPativisitRService.class);// 就诊
		ICiamrRService CiamrRService = ServiceFinder.find(ICiamrRService.class);// 病案
		ICiamrCudService CiamrCudService = ServiceFinder.find(ICiamrCudService.class);// 病案
		ICimrrecallRService CimrrecallRService = ServiceFinder.find(ICimrrecallRService.class);
		//IWorkcalendarExtService calService = ServiceFinder.find(IWorkcalendarExtService.class);// 工作日历
		//ICiMrParamService paraService = ServiceFinder.find(ICiMrParamService.class);// 参数

		if (PativisitRService != null && CiamrRService != null && CiamrCudService != null && CimrrecallRService != null) {
			int days = CiMrParamUtils.GetSysParamMrmHoCompleteInterval(id_org);
			int hours = CiMrParamUtils.GetSysParamMrmCompleteEdit(id_org);
			FDateTime fd = new FDateTime();
			// String id_cld = paraService.getSysParamHoliday(id_org); // 工作日历
			// FDateTime fd_complete = calService.getEndDateTime(fd, -days * 24, id_cld);
			// 计算完成书写截止时间
			long nowMillis = fd.getMillis();
			long dayMillis = days * 24 * 60 * 60 * 1000;
			long hourMillis = hours * 60 * 60 * 1000;
			FDateTime fd_complete = new FDateTime(nowMillis - dayMillis);
			// FDateTime fd_complete = fd.addSeconds(-days*24*3600);
			// 查询就诊信息
			List<PatiVisitDO> patiVisitDOList = getPatiVisitDOList(id_org, fd_complete);
			//查询病历召回审批完成的所有病案
			FDateTime fd_recall = new FDateTime(nowMillis - hourMillis);
			CiMrRecallDO[]recalldo = getRecallDo(id_org,fd_recall);
			if(hours == 0){
				recalldo = null;
			}
			if (patiVisitDOList != null && patiVisitDOList.size() > 0 || (recalldo != null && recalldo.length>0)) {
				String opIds = "(id_ent in ( '";
				int count = 0;
				if(recalldo != null && recalldo.length>0){
					for(int i = 0 ; i < recalldo.length ; i++){
						count += 1;
						if(count == 900){
							opIds+=recalldo[i].getId_ent() + "') or id_ent in ( ' ";
							count = 0;
						}else{
							opIds += recalldo[i].getId_ent() + "' ,'";
						}
					}
				}
				if(patiVisitDOList != null && patiVisitDOList.size() > 0){
					for (PatiVisitDO ent : patiVisitDOList) {
						count += 1;
						if (count == 900) {
							opIds += ent.getId_ent() + "') or id_ent in ( '";
							count = 0;
						} else
							opIds += ent.getId_ent() + "' ,'";
					}
				}
				
				opIds = opIds.substring(0, opIds.length() - 2) + "))";
				AMrDO[] amrDOs = CiamrRService.find(opIds, null, FBoolean.FALSE);
				
				if (amrDOs != null && amrDOs.length > 0) {
					ICiMrParamService paraSer = ServiceFinder.find(ICiMrParamService.class);
					Boolean canSend = paraSer.getSysParamSend2OthSys(id_org);
					Boolean isByMonitor = paraSer.getSysParaIsPushMrByMonitor(Context.get().getOrgId());
					SendMrFpDataBp _service = new SendMrFpDataBp();
					
					for (AMrDO amr : amrDOs) {
						String sendResult = "false";
						
						if(canSend && isByMonitor){
							 // 触发事件
							 BDCommonEvent event = new BDCommonEvent(IMrEventConst.EVENT_SOURCE_MR_AMR_COMPLETE, 
									 IEventType.TYPE_UPDATE_AFTER, new Object[]{amr.getId_ent()});
							 EventDispatcher.fireEvent(event);			
						}
						
						if (canSend && !isByMonitor) {
							try {
								sendResult = _service.sendCMISMsg(amr.getId_ent());
							} catch (Exception e) {
								sendResult = "false";
								throw new BizException("更新病案表失败");
							}
						} 
						
						if(!canSend){
							// 如果不需要推送，直接完成
							sendResult = "true";
						}
							
						// 如果第三方保存上数据，才置为完成
						if (sendResult.contains("true")) 
						{
							amr.setFg_complete(FBoolean.TRUE);
							amr.setId_qa_doctor_part_sta(ICiMrDictCodeConst.ID_MR_COMWRITE);
							amr.setSd_qa_doctor_part_sta(ICiMrDictCodeConst.SD_MR_COMWRITE);
							amr.setId_qa_nurse_part_sta(ICiMrDictCodeConst.ID_MR_COMWRITE);
							amr.setSd_qa_nurse_part_sta(ICiMrDictCodeConst.SD_MR_COMWRITE);
							amr.setStatus(DOStatus.UPDATED);
							// 未修改完成状态的数据无需保存
							CiamrCudService.save(new AMrDO[]{ amr });
						}
						/*
						 * 为了推送数据不成功时，可以实现不进行完成状态改变的功能，注释业务插件代码，直接放到业务里
						 * HospitalFirstPageDTO hospitalFirstPageDTO =
						 * this.getMrFpMsg(amr.getId_ent()); if
						 * (hospitalFirstPageDTO != null //&&
						 * hospitalFirstPageDTO.getId_mrfp() != null ) {
						 * 
						 * BDCommonEvent event = new
						 * BDCommonEvent(IMrEventConst.
						 * EVENT_SOURCE_MR_FP_COMPLETE,
						 * IEventType.TYPE_UPDATE_AFTER, hospitalFirstPageDTO);
						 * EventDispatcher.fireEvent(event); }
						 */
					}
					//CiamrCudService.save(amrDOs);
				}
			}
		}
	}

	/**
	 * 获取病案首页信息
	 * 
	 * @param Id_ent
	 * @throws BizException
	 */
	@SuppressWarnings("unchecked")
	private HospitalFirstPageDTO getMrFpMsg(String id_ent) throws BizException {

		HospitalFirstPageDTO hospitalFirstPageDTO = new HospitalFirstPageDTO();

		FArrayList list_bl = new FArrayList();

		IBl2mrfpRService bl2mrfpRService = ServiceFinder.find(IBl2mrfpRService.class);
		CiMrFpBlDO[] ciMrFpBlDOArrs = bl2mrfpRService.find("id_ent='" + id_ent + "'", "", FBoolean.FALSE);
		list_bl.add(ciMrFpBlDOArrs);
		hospitalFirstPageDTO.setLs_bl(list_bl);

		FArrayList list_di = new FArrayList();
		DiaInfoDTO diaInfoDTO = new DiaInfoDTO();// TODO 未赋值
		list_di.add(diaInfoDTO);
		hospitalFirstPageDTO.setLs_dia(list_di);

		FArrayList list_other = new FArrayList();
		IOther2mrfpMDORService other2mrfpMDORService = ServiceFinder.find(IOther2mrfpMDORService.class);
		CiMrFpOtherDO[] ciMrFpOtherDOArrs = other2mrfpMDORService.find("id_ent='" + id_ent + "'", "", FBoolean.FALSE);
		list_other.add(ciMrFpOtherDOArrs);
		hospitalFirstPageDTO.setLs_other(list_other);

		FArrayList list_pat = new FArrayList();
		IPat2mrfpRService pat2mrfpRService = ServiceFinder.find(IPat2mrfpRService.class);
		CiMrFpPatDO[] ciMrFpPatDOArrs = pat2mrfpRService.find("id_ent='" + id_ent + "'", "", FBoolean.FALSE);
		list_pat.add(ciMrFpPatDOArrs);
		hospitalFirstPageDTO.setLs_patient(list_pat);

		FArrayList list_sug = new FArrayList();
		ISug2mrfpRService sug2mrfpRService = ServiceFinder.find(ISug2mrfpRService.class);
		CiMrFpSugDO[] ciMrFpSugDOArrs = sug2mrfpRService.find("id_ent='" + id_ent + "'", "", FBoolean.FALSE);
		list_sug.add(ciMrFpSugDOArrs);
		hospitalFirstPageDTO.setLs_sug(list_sug);

		// 重症监护
		// 缺少附页信息
		return hospitalFirstPageDTO;
	}
	
	/**
	 * 查询符合已出院时间并且未完成书写的就诊数据
	 * @param id_org
	 * @param fd_complete
	 * @return
	 * @throws BizException
	 */
	@SuppressWarnings("unchecked")
	private List<PatiVisitDO> getPatiVisitDOList(String id_org, FDateTime fd_complete) throws BizException {
		StringBuilder sb = new StringBuilder();
		sb.append(" select ent.id_ent, ent.id_pat, ent.code_entp, ent.id_org, ent.id_dep_phy ");
		sb.append(" from en_ent ent ");
		sb.append(" left join bd_dep dep ");
		sb.append(" on ent.id_dep_phy = dep.id_dep ");
		sb.append(" left join ci_amr amr ");
		sb.append(" on ent.id_ent = amr.id_ent ");
		sb.append(" where dep.sd_depttp = '01' ");
		sb.append(" and dep.id_org = '");
		sb.append(id_org);
		sb.append("'  ");
		sb.append(" and ent.code_entp = '10' ");
		sb.append(" and ent.dt_end < '");
		sb.append(fd_complete.toLocalString());
		sb.append("' ");
		sb.append(" and amr.fg_complete <> 'Y' ");
		sb.append(" and amr.ds = '0'; ");
		
		DAFacade daf = new DAFacade();
		ArrayList<PatiVisitDO> depList = (ArrayList<PatiVisitDO>) daf.execQuery(sb.toString(),
				new BeanListHandler(PatiVisitDO.class));
		return depList;
	}
	
	private CiMrRecallDO[] getRecallDo(String id_org,FDateTime fd_recalldo)throws BizException{
		StringBuilder sb = new StringBuilder();
		sb.append(" select ci_amr.id_ent ");
		sb.append(" from ci_recall_apply ci_recall_apply ");
		sb.append(" left join ci_amr ci_amr ");
		sb.append(" on ci_recall_apply.id_ent = ci_amr.id_ent ");
		sb.append(" where ci_amr.sd_qa_doctor_part_sta = '"+ICiMrDictCodeConst.SD_MR_WRITING+"' ");
		sb.append(" and ci_amr.id_org = '"+id_org+"' ");
		sb.append(" and ci_recall_apply.dt_med_agree < '"+fd_recalldo.toLocalString()+"' ");
		sb.append(" and ci_recall_apply.sd_apply_status = '"+ICiMrDictCodeConst.SD_RECALL_APPLY_MEDSUBMIT+"' ");
		
		DAFacade da = new DAFacade();
		ArrayList<CiMrRecallDO>dalist = (ArrayList<CiMrRecallDO>) da.execQuery(sb.toString(), new BeanListHandler(CiMrRecallDO.class));
		CiMrRecallDO [] cimrrecall = new CiMrRecallDO[dalist.size()];
		return dalist.toArray(cimrrecall);
	}

}
