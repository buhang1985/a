package iih.ci.ord.s.ems.op.order.copy;

import java.util.Map;

import org.apache.commons.lang3.StringUtils;

import xap.mw.core.data.BizException;
import xap.mw.core.data.Context;
import xap.mw.core.data.DOStatus;
import xap.mw.core.data.FMap;
import xap.mw.coreitf.d.FBoolean;
import xap.mw.coreitf.d.FDateTime;
import xap.mw.sf.core.util.ServiceFinder;
import xap.sys.appfw.businessevent.EventDispatcher;
import xap.sys.appfw.businessevent.IEventType;
import xap.sys.appfw.businessevent.bd.BDCommonEvent;
import xap.sys.xbd.udi.d.UdidocDO;
import iih.bd.bc.udi.pub.IBdSrvDictCodeConst;
import iih.ci.ord.cior.d.OrdApLabDO;
import iih.ci.ord.cior.d.OrdApObsDO;
import iih.ci.ord.cior.d.desc.OrdApLabDODesc;
import iih.ci.ord.ciordems.d.EmsType;
import iih.ci.ord.ciorder.d.CiOrderDO;
import iih.ci.ord.ciorder.d.CiorderAggDO;
import iih.ci.ord.ciorder.i.ICiorderMDORService;
import iih.ci.ord.content.d.CiOrContentDO;
import iih.ci.ord.content.listener.sourceid.SourceIdConst;
import iih.ci.ord.ems.d.CiEmsDTO;
import iih.ci.ord.ems.d.CiEnContextDTO;
import iih.ci.ord.ordsrvmm.d.OrdSrvMmDO;
import iih.ci.ord.pub.CiOrdAppUtils;
import iih.ci.ord.pub.CiOrdUtils;
import iih.ci.ord.s.ems.meta.DiagOutlineInfo;
import iih.ci.ord.s.ems.utils.CiOrContentUtils;
import iih.ci.ord.s.ems.utils.DiagInfoUtils;
import iih.ci.ord.s.ems.utils.meta.LisOrContentParam;
import iih.ci.ord.s.external.thirdws.utils.UdidocUtils;

/**
 * 检验复制
 * @author Young
 *
 */
public class OrderLisCopyBP extends OrderBaseCopyBP {
	
	private String Id_or;
	
	public String getId_or() {
		return Id_or;
	}

	public void setId_or(String id_or) {
		Id_or = id_or;
	}

	/**
	 * 复制检验申请单
	 * 
	 * @param id_ors
	 */
	@Override
	protected Boolean copyCiorderAppInfo(Map<String, String> mapIdors, FDateTime dt) throws BizException {
		if (CiOrdUtils.isEmpty(mapIdors))
			return false;
		OrdApLabDO[] ordApLabDOs = getOrdApLabDOs(mapIdors.keySet().toArray(new String[] {}));
		if (CiOrdUtils.isEmpty(ordApLabDOs))
			return false;
		setOrdApLabDOs(ordApLabDOs, mapIdors,dt);
		return saveOrdApLabDOs(ordApLabDOs);
	}
	
	/**
	 * 查询OrdApLabDO
	 * @param idors
	 * @return
	 * @throws BizException
	 */
	protected OrdApLabDO[] getOrdApLabDOs(String[] idors) throws BizException {
		if (CiOrdUtils.isEmpty(idors))
			return null;
		String strIdors = "";
		for (String id_or : idors) {
			strIdors += ",'" + id_or + "'";
		}
		return CiOrdAppUtils.getOrapplisQryService()
				.find(OrdApLabDODesc.TABLE_ALIAS_NAME + ".id_or in (" + strIdors.substring(1) + ")", "",
						FBoolean.FALSE);
	}
	
	/**
	 * 设置OrdApLabDO
	 * @param ordApLabDOs
	 * @param mapIdors
	 * @throws BizException 
	 */
	private void setOrdApLabDOs(OrdApLabDO[] ordApLabDOs, Map<String, String> mapIdors, FDateTime dt) throws BizException{
		if (CiOrdUtils.isEmpty(ordApLabDOs))
			return;
		for (OrdApLabDO ordApLabDO : ordApLabDOs) {
			ordApLabDO.setId_orlab(null);
			ordApLabDO.setId_or(mapIdors.get(ordApLabDO.getId_or()));
			this.setId_or(mapIdors.get(ordApLabDO.getId_or()));
			ordApLabDO.setNo_applyform(this.getApplyNo(ordApLabDO.getId_or()));
			ordApLabDO.setStatus(DOStatus.NEW);
			ordApLabDO.setDt_plan(CiOrdAppUtils.getServerDateTime());//计划时间
			//诊断
			CiEnContextDTO context = (CiEnContextDTO) Context.get().getAttribute("CiEnContextDTO");
			DiagOutlineInfo diagOutlineInfo = DiagInfoUtils.GetDiagOutLineInfo(context.getId_en());
			if (diagOutlineInfo != null) {
			ordApLabDO.setId_diitm(diagOutlineInfo.getId_diitm());
			ordApLabDO.setName_diag(diagOutlineInfo.getName_diag());
			}
		}
	}
	
	/**
	 * 保存OrdApLabDO
	 * @param ordApLabDOs
	 * @return
	 * @throws BizException
	 */
	private Boolean saveOrdApLabDOs(OrdApLabDO[] ordApLabDOs) throws BizException{
		if (CiOrdUtils.isEmpty(ordApLabDOs))
			return false;
		ordApLabDOs = CiOrdAppUtils.getOrapplisService().save(ordApLabDOs);
		return !CiOrdUtils.isEmpty(ordApLabDOs);
	}

	@Override
	protected String getApplyNo() throws BizException {
		return CiOrdUtils.getApplyNo(IBdSrvDictCodeConst.SD_SRVTP_LIS);
	}

	@Override
	protected void setCopyCiEmsDTOInfo(CiEmsDTO ciEmsDTO) throws BizException {
		FMap map = ciEmsDTO.getOrapplysheet();
		if(map!=null){
			OrdApLabDO lab = (OrdApLabDO)map.get(EmsType.LIS.toString());
			if(lab!=null){
				lab.setStatus(DOStatus.NEW);
				lab.setId_orlab(null);
				lab.setDt_plan(CiOrdAppUtils.getServerDateTime());// 0177532: 住院医生站，从历史记录里面开立医嘱，医疗单的默认时间需要改为现在的时间 // liyuelong 2019-11-26 修改：ciEmsDTO.getDt_begin()-->CiOrdAppUtils.getServerDateTime()
				lab.setId_or(null);
				lab.setNo_applyform(this.getApplyNo());
			}
		}
	}
	/**
	 * 重新组装医嘱内容
	 * @param aggDOs
	 * @param mapTeamSrvDOs
	 * @throws BizException 
	 */
	@Override
	protected void content_or(CiorderAggDO[]aggDOs,Map<String, OrdSrvMmDO> mapTeamSrvDOs) throws BizException {
		for (CiorderAggDO aggDO : aggDOs) {
			String id_or_old = mapNewOldKeys.get(aggDO.getParentDO().getId_or());
				OrdApLabDO[] ordApLabDOs = getOrdApLabDOs(new String[] {id_or_old});
				 //OrdApLabDO[] ordApLabDOs = iCiorapplisRService.findByAttrValString("Id_or", this.getId_or());
				//标本
				UdidocDO biaoben = UdidocUtils.getUdidocByCode("BD.SRV.0555", ordApLabDOs[0].getSd_samptp());
				//LisOrContentParam lisOrContentParam = new LisOrContentParam(ordApLabDOs[0].getId_or(),aggDO.getParentDO().getSd_srvtp(),aggDO.getParentDO().getName_or(),aggDO.getParentDO().getFg_urgent(),biaoben.getName(),aggDO.getParentDO().getDes_or(),aggDO.getParentDO().getFg_set(),getOrContentDTOs(aggDO.getOrdSrvDO(), mapTeamSrvDOs));
				LisOrContentParam lisOrContentParam = new LisOrContentParam(ordApLabDOs[0],aggDO.getParentDO(),biaoben,getOrContentDTOs(aggDO.getOrdSrvDO(), mapTeamSrvDOs));
				CiOrContentDO contentdo=new CiOrContentDO();
				Object[] params = new Object[]{contentdo,lisOrContentParam};
				BDCommonEvent event = new BDCommonEvent(SourceIdConst.COPY_CONTENTOR_LIS_SOURCEID, IEventType.TYPE_UPDATE_AFTER, params);
				EventDispatcher.fireEvent(event);
				aggDO.getParentDO().setContent_or(contentdo==null?"":contentdo.toString());//CiOrContentUtils.create(lisOrContentParam).toString()
		}
	}
}
