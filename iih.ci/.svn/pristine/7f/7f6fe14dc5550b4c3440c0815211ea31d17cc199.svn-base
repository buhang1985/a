package iih.ci.event.ord.reissue.common;

import java.util.List;

import org.apache.commons.lang.StringUtils;

import iih.ci.event.i.reissue.IRessueAssebleDataService;
import iih.ci.event.reissue.d.IEMsgReissueConst;
import iih.ci.event.reissue.d.IEMsgReissueDTO;
import iih.ci.ord.ciorder.d.CiOrderDO;
import xap.mw.core.data.BizException;
import xap.mw.core.data.Context;
import xap.sys.jdbc.facade.DAFacade;
import xap.sys.jdbc.handler.BeanListHandler;
import xap.sys.jdbc.kernel.SqlParam;
import xap.sys.xbd.paramset.i.ParamsetQryUtil;

public abstract class ReissueCommonAction implements IRessueAssebleDataService {
	protected ReissueCommonBP reissueBP;
	protected IEMsgReissueDTO iEMsgReissueDTO;
	public ReissueCommonAction(){};
	public void setiEMsgReissueDTO(IEMsgReissueDTO iEMsgReissueDTO) {
		this.iEMsgReissueDTO = iEMsgReissueDTO;
	}
	public ReissueCommonBP getReissueBP() {
		return reissueBP;
	}
	public void setReissueBP(ReissueCommonBP reissueBP) {
		this.reissueBP = reissueBP;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public CiOrderDO[] getOrders() throws BizException {
		// TODO 过滤出医嘱
		
		String record = "";
		try {
			record = ParamsetQryUtil.getParaString(Context.get().getOrgId(), "BLCG0002");
		} catch (Exception e) {
			record = "1";//出异常 默认不执行记账
		}
		StringBuffer sql = new StringBuffer();
		sql.append("select * from ci_order c ");
		sql.append("left join pi_pat t on c.id_pat = t.id_pat ");
		sql.append("left join en_ent e on e.id_ent = c.id_en ");
		sql.append("left join MP_OR_PR r on r.id_or = c.id_or ");
		sql.append("left join MP_NE_LAB_SAMP_ITM_REF f on f.id_or_pr = r.id_or_pr ");
		sql.append("left join mp_ne_lab_samp p on p.id_labsamp = f.id_labsamp ");
		if (IEMsgReissueConst.OPVISITTYPE.equals(this.iEMsgReissueDTO.getVisittypecode())) {
			if ("4".equals(record)) {
				sql.append("where c.sd_su_bl = '1' and c.fg_sign = 'Y' and c.fg_canc = 'N' and c.sd_su_mp = '0' ");
			} else if (!"4".equals(record)) {
				sql.append("where c.sd_su_bl != '2' and c.fg_sign = 'Y' and c.fg_canc = 'N' and c.sd_su_mp = '0' ");
			}
		} else if (IEMsgReissueConst.IPVISITTYPE.equals(this.iEMsgReissueDTO.getVisittypecode())) {
			sql.append("where c.fg_chk = 'Y' and c.fg_chk_canc = 'N' and c.sd_su_mp = '0' ");
		}
		StringBuffer whereStr = new StringBuffer();
		SqlParam param = new SqlParam();
		if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getOrderno())) {
			whereStr.append("and c.code_or = ? ");//医嘱号
			param.addParam(this.iEMsgReissueDTO.getOrderno());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getBarcode())) {
			
			whereStr.append("and p.no_bar = ? ");//标本条码号
			param.addParam(this.iEMsgReissueDTO.getBarcode());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getVisitordno())) {
			whereStr.append("and e.code = ? ");//就诊流水号
			param.addParam(this.iEMsgReissueDTO.getVisitordno());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getPatientlid())) {
			whereStr.append("and id_pat = ? ");//患者id
			param.addParam(this.iEMsgReissueDTO.getPatientlid());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getEncountercardno())) {
			//当就诊类别 = 01,02,0201,0202时，对应pi_pat.barcode_chis
			String enCard = this.iEMsgReissueDTO.getEncountercardno();
			if ("01".equals(enCard) || "02".equals(enCard) || "0201".equals(enCard) || "0202".equals(enCard)) {
				whereStr.append("and t.barcode_chis = ? ");//就诊卡号
			} 
			//当就诊类别 = 0203,03时，对应pi_pat.code_amr_ip
			else if ("0203".equals(enCard) || "03".equals(enCard)) {
				whereStr.append("and t.code_amr_ip = ? ");//就诊卡号
				
			}
			param.addParam(this.iEMsgReissueDTO.getEncountercardno());
		} 
		if (whereStr.toString().length() == 0) return null;
		sql.append(whereStr.toString());
		List<CiOrderDO> orderDOs = (List<CiOrderDO>) new DAFacade().execQuery(whereStr.toString(), param,
				new BeanListHandler(CiOrderDO.class));
		return orderDOs.toArray(new CiOrderDO[orderDOs.size()]);
	}
	
	public String getWhereStr() {
		return null;
	}
	
	public String getWhereStr1() {
		
		String record = "";
		try {
			record = ParamsetQryUtil.getParaString(Context.get().getOrgId(), "BLCG0002");
		} catch (Exception e) {
			record = "1";//出异常 默认不执行记账
		}
		StringBuffer whereStr = new StringBuffer();
		whereStr.append("select * from ci_order c ");
		whereStr.append("left join pi_pat p on c.id_pat = p.id_pat ");
		whereStr.append("left join en_ent e on e.id_ent = c.id_en ");
		if (IEMsgReissueConst.OPVISITTYPE.equals(this.iEMsgReissueDTO.getVisittypecode())) {
			if ("4".equals(record)) {
				whereStr.append("where sd_su_bl = '1' and fg_sign = 'Y' and fg_canc = 'N' and sd_su_mp = '0' ");
			} else if (!"4".equals(record)) {
				whereStr.append("where  sd_su_bl != '2' and fg_sign = 'Y' and fg_canc = 'N' and sd_su_mp = '0' ");
			}
		} else if (IEMsgReissueConst.IPVISITTYPE.equals(this.iEMsgReissueDTO.getVisittypecode())) {
			whereStr.append("where fg_chk = 'Y' and fg_chk_canc = 'N' and sd_su_mp = '0' ");
		}
		
		SqlParam param = new SqlParam();
		if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getOrderno())) {
			whereStr.append("and code_or = ? ");//医嘱号
			param.addParam(this.iEMsgReissueDTO.getOrderno());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getApplyid())) {
			whereStr.append("and applyno = ? ");//申请单号
			param.addParam(this.iEMsgReissueDTO.getApplyid());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getBarcode())) {
			whereStr.append("");//标本条码号
			param.addParam(this.iEMsgReissueDTO.getBarcode());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getVisitordno())) {
			whereStr.append("and e.code = ? ");//就诊流水号
			param.addParam(this.iEMsgReissueDTO.getVisitordno());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getPatientlid())) {
			whereStr.append("and id_pat = ? ");//患者id
			param.addParam(this.iEMsgReissueDTO.getPatientlid());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getEncountercardno())) {
			whereStr.append("and p.barcode_chis = ? ");//就诊卡号
			param.addParam(this.iEMsgReissueDTO.getEncountercardno());
		} else if (StringUtils.isNotEmpty(this.iEMsgReissueDTO.getPrintingno())) {
			whereStr.append("  ");//打印单号
			param.addParam(this.iEMsgReissueDTO.getPrintingno());
		} 
		return whereStr.toString();
	}
}
