package iih.ci.ord.s.ems.op.order.copy;

import java.util.Map;

import iih.bd.bc.udi.pub.IBdSrvDictCodeConst;
import iih.ci.ord.cior.d.OrdApObsDO;
import iih.ci.ord.cior.d.desc.OrdApObsDODesc;
import iih.ci.ord.ciordems.d.EmsType;
import iih.ci.ord.ciorder.d.CiorderAggDO;
import iih.ci.ord.content.d.CiOrContentDO;
import iih.ci.ord.content.listener.sourceid.SourceIdConst;
import iih.ci.ord.ems.d.CiEmsDTO;
import iih.ci.ord.ems.d.CiEnContextDTO;
import iih.ci.ord.ordsrvmm.d.OrdSrvMmDO;
import iih.ci.ord.pub.CiOrdAppUtils;
import iih.ci.ord.pub.CiOrdUtils;
import iih.ci.ord.s.ems.meta.DiagOutlineInfo;
import iih.ci.ord.s.ems.orcontent.meta.RisOrContentParam;
import iih.ci.ord.s.ems.utils.CiOrContentUtils;
import iih.ci.ord.s.ems.utils.DiagInfoUtils;
import xap.mw.core.data.BizException;
import xap.mw.core.data.Context;
import xap.mw.core.data.DOStatus;
import xap.mw.core.data.FMap;
import xap.mw.core.utils.StringUtil;
import xap.mw.coreitf.d.FBoolean;
import xap.mw.coreitf.d.FDateTime;
import xap.sys.appfw.businessevent.EventDispatcher;
import xap.sys.appfw.businessevent.IEventType;
import xap.sys.appfw.businessevent.bd.BDCommonEvent;
import xap.sys.jdbc.facade.DAFacade;
import xap.sys.jdbc.handler.BeanHandler;
import xap.sys.jdbc.kernel.SqlParam;

/**
 * 复制检查
 * @author Young
 *
 */
public class OrderRisCopyBP extends OrderBaseCopyBP {
private String Id_or;
	
	public String getId_or() {
		return Id_or;
	}

	public void setId_or(String id_or) {
		Id_or = id_or;
	}
	/**
	 * 复制检查申请单
	 * 
	 * @param id_ors
	 */
	@Override
	protected Boolean copyCiorderAppInfo(Map<String, String> mapIdors, FDateTime dt) throws BizException {
		if (CiOrdUtils.isEmpty(mapIdors))
			return false;
		OrdApObsDO[] ordApObsDOs = getOrdApObsDOs(mapIdors.keySet().toArray(new String[] {}));
		if (CiOrdUtils.isEmpty(ordApObsDOs))
			return false;
		setOrdApObsDOs(ordApObsDOs, mapIdors, dt);
		return saveOrdApObsDOs(ordApObsDOs);
	}

	/**
	 * 查询OrdApObsDO
	 * 
	 * @param idors
	 * @return
	 * @throws BizException
	 */
	protected OrdApObsDO[] getOrdApObsDOs(String[] idors) throws BizException {
		if (CiOrdUtils.isEmpty(idors))
			return null;
		String strIdors = "";
		for (String id_or : idors) {
			strIdors += ",'" + id_or + "'";
		}
		return CiOrdAppUtils.getOrapprisQryService().find(
				OrdApObsDODesc.TABLE_ALIAS_NAME + ".id_or in (" + strIdors.substring(1) + ")", "", FBoolean.FALSE);
	}

	/**
	 * 设置OrdApObsDO
	 * 
	 * @param OrdApObsDOs
	 * @param mapIdors
	 * @throws BizException 
	 */
	private void setOrdApObsDOs(OrdApObsDO[] OrdApObsDOs, Map<String, String> mapIdors, FDateTime dt) throws BizException {
		if (CiOrdUtils.isEmpty(OrdApObsDOs))
			return;
		for (OrdApObsDO ordApObsDO : OrdApObsDOs) {
			ordApObsDO.setId_orobs(null);
			ordApObsDO.setId_or(mapIdors.get(ordApObsDO.getId_or()));
			ordApObsDO.setNo_applyform(this.getApplyNo(ordApObsDO.getId_or()));
			ordApObsDO.setStatus(DOStatus.NEW);
			ordApObsDO.setDt_plan(dt);//计划时间
			// 获取上下文信息
			ordApObsDO.setClinicalzztz(null);
			CiEnContextDTO context = (CiEnContextDTO) Context.get().getAttribute("CiEnContextDTO");
			String clinicalzztzFrom = CiOrdUtils.DiseaseDescription(context.getId_en());
			if (clinicalzztzFrom!=null&&!"".equals(clinicalzztzFrom)) {
				ordApObsDO.setClinicalzztz(clinicalzztzFrom); // 病情描述
			}else{
				OrdApObsDO ordApObsDO1 = getOrdApObsDO("id_en",context.getId_en());
				if (ordApObsDO1!=null&&ordApObsDO1.getClinicalzztz()!=null) {
					ordApObsDO.setClinicalzztz(ordApObsDO1.getClinicalzztz());
				}
			}
			//诊断
			DiagOutlineInfo diagOutlineInfo = DiagInfoUtils.GetDiagOutLineInfo(context.getId_en());
			if (diagOutlineInfo != null) {
				ordApObsDO.setId_diitm(diagOutlineInfo.getId_diitm());// 主诊断的主项目id
				ordApObsDO.setName_diag(diagOutlineInfo.getName_diag());// 主诊断名称
			}
			
			
		}
	}
	/**
	   *    根据传的字段 和字段值 查询医嘱(该方法经测试只反一条  库里多条时也是一条 不适用反多条该方法)
	 * @param column
	 * @param columnValue
	 * @return
	 * @throws BizException
	 */
	public  OrdApObsDO getOrdApObsDO(String column,String columnValue) throws BizException {

		if (StringUtil.isEmpty(columnValue))
			return null;

		//String sql = "select * from ci_order where "+ column +" = ? ";
		String  sql="select * from (select rownum as sn,t.* from (select o.* from ci_ap_obs o where o.id_or in"
				+ "(select id_or from ci_order where "+ column +" = ?)"
				+ "order by o.createdtime desc) t) where sn=1";

		SqlParam sqlParam = new SqlParam();
		sqlParam.addParam(columnValue);

		OrdApObsDO ordDO = (OrdApObsDO) new DAFacade().execQuery(sql, sqlParam, new BeanHandler(OrdApObsDO.class));
		System.out.println("ordDo:"+(ordDO==null?"null":ordDO.toString()));
		return ordDO;
	}

	/**
	 * 保存OrdApObsDO
	 * 
	 * @param ordApObsDOs
	 * @return
	 * @throws BizException
	 */
	private Boolean saveOrdApObsDOs(OrdApObsDO[] ordApObsDOs) throws BizException {
		if (CiOrdUtils.isEmpty(ordApObsDOs))
			return false;
		ordApObsDOs = CiOrdAppUtils.getOrapprisService().save(ordApObsDOs);
		return !CiOrdUtils.isEmpty(ordApObsDOs);
	}

	@Override
	protected String getApplyNo() throws BizException {
		return CiOrdUtils.getApplyNo(IBdSrvDictCodeConst.SD_SRVTP_RIS);
	}

	@Override
	protected void setCopyCiEmsDTOInfo(CiEmsDTO ciEmsDTO) throws BizException {
		FMap map = ciEmsDTO.getOrapplysheet();
		if(map!=null){
			OrdApObsDO obs = (OrdApObsDO)map.get(EmsType.RIS.toString());
			if(obs!=null){
				obs.setStatus(DOStatus.NEW);
				obs.setId_orobs(null);
				obs.setDt_plan(ciEmsDTO.getDt_begin());
				obs.setId_or(null);
				obs.setNo_applyform(this.getApplyNo());
			}
		}
	}
	/**
	 * 重新组装医嘱内容
	 * 
	 * @param aggDOs
	 * @param mapTeamSrvDOs
	 * @throws BizException
	 */
	protected void content_or(CiorderAggDO[] aggDOs, Map<String, OrdSrvMmDO> mapTeamSrvDOs) throws BizException {
		for (CiorderAggDO aggDO : aggDOs) {
			String id_or_old = mapNewOldKeys.get(aggDO.getParentDO().getId_or());
				OrdApObsDO[] ordApObsDOs = getOrdApObsDOs(new String[] {id_or_old});
			//RisOrContentParam  risOrContentParam = new RisOrContentParam(aggDO.getParentDO().getName_or(),aggDO.getParentDO().getSd_srvtp(),ordApObsDOs[0].getId_or(),ordApObsDOs[0].getId_body(),aggDO.getParentDO().getFg_urgent(),aggDO.getParentDO().getFg_set());
			RisOrContentParam  risOrContentParam = new RisOrContentParam(aggDO.getParentDO(),ordApObsDOs[0]);
			CiOrContentDO contentdo=new CiOrContentDO();
			Object[] params = new Object[]{contentdo,risOrContentParam};
			BDCommonEvent event = new BDCommonEvent(SourceIdConst.COPY_CONTENTOR_RIS_SOURCEID, IEventType.TYPE_UPDATE_AFTER, params);
			EventDispatcher.fireEvent(event);
			aggDO.getParentDO().setContent_or(contentdo==null?"":contentdo.toString());
			//aggDO.getParentDO().setContent_or(CiOrContentUtils.create(risOrContentParam).toString());
		}

	}
}
