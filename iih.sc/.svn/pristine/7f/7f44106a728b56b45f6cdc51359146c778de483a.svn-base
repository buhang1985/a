package iih.sc.apt.s.listener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import iih.bd.bc.event.pub.IBlEventConst;
import iih.bd.bc.udi.pub.IBdFcDictCodeConst;
import iih.bl.cg.blcgoep.d.BlCgItmOepDO;
import iih.bl.cg.blcgoep.d.BlCgOepDO;
import iih.bl.cg.blcgoep.d.BlcgoepAggDO;
import iih.bl.cg.blcgoep.i.IBlcgoepRService;
import iih.bl.cg.dto.d.OpRefund4IpEsDTO;
import iih.bl.st.dto.blpayoep.d.BlPayOepRefundEventDTO;
import iih.sc.apt.s.listener.bp.OpLisRisRefundNewBP;
import xap.mw.core.data.BizException;
import xap.mw.core.utils.ArrayUtil;
import xap.mw.core.utils.StringUtil;
import xap.mw.sf.core.util.ServiceFinder;
import xap.sys.appfw.businessevent.BusinessEvent;
import xap.sys.appfw.businessevent.BusinessEvent.BusinessUserObj;
import xap.sys.appfw.businessevent.IBusinessEvent;
import xap.sys.appfw.businessevent.IBusinessListener;

/**
 * 检查检验退费事件侦听并进行集成平台门诊事件发送 （集成平台事件）
 *
 * @author yzh
 *
 */
public class OpLisRisRefundNewListener implements IBusinessListener {

	@Override
	public void doAction(IBusinessEvent event) throws BizException {
		// 事件源及事件类型判断
		if (!(event.getSourceID().equals(IBlEventConst.EVENT_SOURCE_OEP_REFUND)
				&& event.getEventType().equals(IBlEventConst.EVENT_TYPE_OEP_REFUND)))
			return;
		// 退费成功的服务项目数据及空判断逻辑
		BusinessEvent dbevent = (BusinessEvent) event;
		Object newObjs = dbevent.getUserObject();
		if (newObjs == null)
			return;
		BlPayOepRefundEventDTO refundDTO = getRefundDTOs(newObjs);
		if (refundDTO == null)
			return;
		// List<OpRefund4IpEsDTO[]> pickRefunds = pickRefundSrv(refundDTOs);
		// Hashtable<String, List<OpRefund4IpEsDTO>> hashtable = pickRefundSrv(refundDTO.getActualRefundCgAggData());
		// 费用组数据传递有误，此处为全部患者的全部医嘱数据，目前费用无法解决，暂用错误数据

		//费用组监听类中传递数据错误，为全部医嘱数据，应为具体退费的医嘱数据
		//yu.b 2020-07-16
		BlcgoepAggDO[] aggDOs = refundDTO.getActualRefundCgAggData();

		if(ArrayUtil.isEmpty(aggDOs)) {
			BlCgItmOepDO[] oepDOs =  refundDTO.getActualRefundCgData();
			aggDOs = this.copyItmOepDoToOepAggDO(oepDOs);
		}
		Hashtable<String, List<OpRefund4IpEsDTO>> hashtable = pickRefundSrv(aggDOs);
		//Hashtable<String, List<OpRefund4IpEsDTO>> hashtable = pickRefundSrv(refundDTO.getRedCgData());
		if(MapUtils.isEmpty(hashtable)){
			return;
		}
		// 检查和检验
		lisRisRefundAction(hashtable);

	}

	/**
	 * 分拣处方类型
	 *
	 * @param refundDTOs
	 * @return
	 */
	public Hashtable<String, List<OpRefund4IpEsDTO>> pickRefundSrv(BlcgoepAggDO[] blcgoers) {
		Hashtable<String, List<OpRefund4IpEsDTO>> hashtable = new Hashtable<String, List<OpRefund4IpEsDTO>>();
		OpRefund4IpEsDTO ipesDTO;
		for (BlcgoepAggDO blcgoer : blcgoers) {
			for (BlCgItmOepDO oepDO : blcgoer.getBlCgItmOepDO()) {
				//门诊、急诊流水、急诊抢救数据筛选
				if(!isOpData(oepDO)) continue;
				String presType = oepDO.getCode_applytp();
				//数据转换
				ipesDTO = convrtDTO(blcgoer.getParentDO(), oepDO);
				if (StringUtil.isEmpty(presType)) {
					continue;
				}
				if (hashtable.containsKey(presType)) {
					List<OpRefund4IpEsDTO> list = hashtable.get(presType);
					list.add(ipesDTO);
					hashtable.put(presType, list);
				} else {
					List<OpRefund4IpEsDTO> list = new ArrayList<OpRefund4IpEsDTO>();
					list.add(ipesDTO);
					hashtable.put(presType, list);
				}
			}
		}
		return hashtable;
	}

	private boolean isOpData(BlCgItmOepDO oepDO) {
		if(StringUtil.isEmpty(oepDO.getCode_enttp())||!IBdFcDictCodeConst.SD_CODE_ENTP_OP.equals(oepDO.getCode_enttp())) {//门诊退费
			return false;
		}
		return true;
	}
	/**
	 * 检查和检验类，组装集成平台的数据，并发送事件
	 *
	 * @param refundsIpEs
	 * @throws BizException
	 */
	private void lisRisRefundAction(Hashtable<String, List<OpRefund4IpEsDTO>> hashtable) throws BizException {
		OpLisRisRefundNewBP lisRisBp = new OpLisRisRefundNewBP();
		lisRisBp.exec(hashtable);
	}


	/*List<OpRefund4IpEsDTO> allDtos=new ArrayList<OpRefund4IpEsDTO>();
	String[] typesArr=types.split(COMMA_STR);
	for(String type:typesArr) {
		List<OpRefund4IpEsDTO> everyDtos=hashtable.get(type);
		if(!isEmpty(everyDtos)) {
			allDtos.addAll(everyDtos);
		}
	}*/


	/**
	 * 获得事件中的入参DTO
	 *
	 * @param newObjs
	 * @return
	 */
	public BlPayOepRefundEventDTO getRefundDTOs(Object newObjs) {
		BusinessUserObj business = (BusinessUserObj) newObjs;
		BlPayOepRefundEventDTO bloeps = (BlPayOepRefundEventDTO) business.getUserObj();
		return bloeps;
	}
	/**
	 * 数据转换
	 * @param blcgoepdo
	 * @param oepDO
	 * @return
	 */
	private OpRefund4IpEsDTO convrtDTO(BlCgOepDO blcgoepdo, BlCgItmOepDO oepDO) {
		OpRefund4IpEsDTO ipesDTO = new OpRefund4IpEsDTO();
		ipesDTO.setCode_apply(oepDO.getCode_apply());
		ipesDTO.setCode_applytp(oepDO.getCode_applytp());
		// ipesDTO.setCode_pres();
		ipesDTO.setDt_refund(blcgoepdo.getDt_cg());
		ipesDTO.setId_cgitm(oepDO.getId_cgitmoep());
		ipesDTO.setId_emp_refund(blcgoepdo.getId_emp_cg());
		ipesDTO.setId_or(oepDO.getId_or());
		ipesDTO.setId_orsrv(oepDO.getId_orsrv());
		ipesDTO.setId_pat(blcgoepdo.getId_pat());
		ipesDTO.setId_pres(oepDO.getId_pres());
		ipesDTO.setQuan(oepDO.getQuan());
		ipesDTO.setReason(oepDO.getNote());
		// ipesDTO.setSd_prestp(Sd_prestp);
		return ipesDTO;
	}

	/**
	 * 数据转换
	 * @param blcgoepdo
	 * @author yu.b 2020-07=16
	 * @return
	 */

	private BlcgoepAggDO[] copyItmOepDoToOepAggDO(BlCgItmOepDO[] oepDOs) throws BizException{
		List<BlcgoepAggDO> aggDOs = new LinkedList<BlcgoepAggDO>();
		Map<String, List<BlCgItmOepDO>> map = new HashMap<String, List<BlCgItmOepDO>>();
		for(BlCgItmOepDO itmOepDO : oepDOs){
			if(map.containsKey(itmOepDO.getId_cgoep())){
				map.get(itmOepDO.getId_cgoep()).add(itmOepDO);
			} else {
				List<BlCgItmOepDO> list = new LinkedList<BlCgItmOepDO>();
				list.add(itmOepDO);
				map.put(itmOepDO.getId_cgoep(), list);
			}

		}
		for(String id_cgoep : map.keySet()){
			BlcgoepAggDO aggDO = new BlcgoepAggDO();
			IBlcgoepRService oepService = ServiceFinder.find(IBlcgoepRService.class);
			aggDO = oepService.findById(id_cgoep);
			aggDO.setBlCgItmOepDO(map.get(id_cgoep).toArray(new BlCgItmOepDO[map.get(id_cgoep).size()]));
			aggDOs.add(aggDO);
		}
		return aggDOs.toArray(new BlcgoepAggDO[aggDOs.size()]);

	}
}
