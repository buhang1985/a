package iih.sc.apt.s.bp;

import java.util.List;

import iih.bd.bc.udi.pub.IScDictCodeConst;
import iih.sc.apt.dto.d.MtAppDTO;
import iih.sc.apt.s.bp.mt.CancMtAptBP;
import iih.sc.apt.scapt.d.ScAptDO;
import iih.sc.apt.scapt.i.IScaptMDOCudService;
import iih.sc.apt.scapt.i.IScaptMDORService;
import iih.sc.sch.sctick.d.ScSchTickDO;
import iih.sc.sch.sctick.i.ISctickCudService;
import iih.sc.sch.sctick.i.ISctickRService;
import xap.mw.core.data.BizException;
import xap.mw.core.data.DOStatus;
import xap.mw.coreitf.d.FBoolean;
import xap.mw.coreitf.d.FDateTime;
import xap.mw.sf.core.util.ServiceFinder;

public class CancOptAptNotKeepNoBP {

	public void exec(MtAppDTO appDTO) throws BizException {
		
		//取消预约
		new CancMtAptBP().exec(appDTO, IScDictCodeConst.SD_SCTP_OT);
		
		//获取票号后面的预约信息
		ScAptDO[] aptDOs = this.getAptDOs(appDTO);
		if(aptDOs == null || aptDOs.length ==0)
		{
			return;
		}
		
		//获取票号以后的排班(包括当前)
		ScSchTickDO[] tickDOs = this.getTickDOs(appDTO);
		if(tickDOs == null || tickDOs.length ==0)
		{
			return;
		}
		
		for(int i = 0 ;i < aptDOs.length ; i++)
		{
			ScAptDO aptDO = aptDOs[i];
			for (int j = 1 ;j < tickDOs.length ; j++) 
			{
				if(aptDO.getQueno().equals(tickDOs[j].getQueno()))
				{
					tickDOs[j - 1 ].setStatus(DOStatus.UPDATED);
					tickDOs[j].setStatus(DOStatus.UPDATED);
					tickDOs[j - 1 ].setEu_used(1);
					tickDOs[j - 1 ].setPolno_used(tickDOs[j].getPolno_used());
					tickDOs[j].setPolno_used(null);
					aptDO.setId_tick(tickDOs[j - 1].getId_tick());
					tickDOs[j].setEu_used(0);
					aptDO.setDt_b(new FDateTime(aptDO.getDt_b().getBeginDate(), tickDOs[j - 1 ].getT_b()));
					break;
				}
			}
			aptDO.setStatus(DOStatus.UPDATED);
			aptDO.setQueno(aptDO.getQueno() - 1);
		}
		
		//保存预约信息
		IScaptMDOCudService aptCud = ServiceFinder.find(IScaptMDOCudService.class);
		aptCud.save(aptDOs);
		
		//保存号位信息
		ISctickCudService tickCud = ServiceFinder.find(ISctickCudService.class);
		tickCud.save(tickDOs);
	}
	
	
	private ScAptDO[] getAptDOs(MtAppDTO appDTO) throws BizException
	{
 		IScaptMDORService rService = ServiceFinder.find(IScaptMDORService.class);
		ScAptDO[] aptDOs = rService.find(String.format(" id_sch = '%s' and queno > %s and fg_canc = 'N'",appDTO.getId_sch(),appDTO.getQueno()), "queno", FBoolean.FALSE);
		return aptDOs;
	}
	
	private ScSchTickDO[] getTickDOs(MtAppDTO appDTO) throws BizException
	{
		ISctickRService rService = ServiceFinder.find(ISctickRService.class);
		ScSchTickDO[] tickDOs = rService.find(String.format(" id_sch = '%s' and queno >= %s ",appDTO.getId_sch(),appDTO.getQueno()), "queno", FBoolean.FALSE);
		return tickDOs;
	}
}
